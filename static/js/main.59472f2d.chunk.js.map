{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["characters","allowedCharacters","containerStyle","inputsRef","useRef","useEffect","sendResult","res","input","onChange","handleOnChange","e","handleOnKeyDown","key","target","handleOnFocus","handleOnPaste","value","i","inputs","onKeyDown","onFocus","onPaste","type","password","ref","el","maxLength","style","inputStyle","App","className","alt","src","href","padding","width","borderRadius","fontSize","textAlign","marginRight","border","textTransform","ReactDOM","render","document","getElementById"],"mappings":"mPAWkC,SAAC,GAAD,QAChCA,kBADgC,MAAC,EAAD,MAEhCC,yBAFgC,MAAC,iBAAD,EAAC,EAAD,EAAC,WAAD,EAAC,WAAD,EAAC,WAMjCC,EANgC,EAMhCA,eAEMC,EAAYC,iBAAlB,IAEAC,qBAAU,WACRF,uBADFE,IAuDA,IAnDA,IAAMC,EAAa,WACjB,IAAMC,EAAMJ,eAAuBK,YAAD,OAAWA,EAAjCL,cAAZ,IACAM,GAAYA,EAAZA,IAGIC,EAAkBC,YAClBA,qBAAJ,GACE,OAAIA,6BACDA,oCAGHA,kBAEFL,KAGIM,EAAmBD,YAAD,IACdE,EAAR,EAAQA,IACFC,EAASH,EAAf,OACA,cAAIE,IACEC,cAAJ,OAA2BA,yBACzB,OAAIA,2BACDA,iCACDH,oBAGFG,WAEFR,MAIES,EAAiBJ,YACrBA,mBAGIK,EAAiBL,YACrB,IAAMM,EAAQN,wBAAd,QACA,GAAIM,QAAJ,GAAoC,CAClC,IAAK,IAAIC,EAAT,EAAgBA,KAAkBA,EAAID,EAAtC,OAAoDC,IAClDf,mBAA6Bc,SAA7Bd,GACA,OAAIA,iCACDA,wCAGLG,IAEFK,oBAGIQ,EAAN,GAhEgC,WAiEvBD,GACPC,OACE,2BACEN,IAAKK,EACLT,SAAUC,EACVU,UAAWR,EACXS,QAASN,EACTO,QAASN,EACTO,KAAMC,EAAW,WAAa,OAC9BC,IAAMC,YAAD,OAA2BvB,aAAuBuB,GACvDC,UAAW,EACXC,MAAOC,MAXJX,EAAT,EAAgBA,EAAhB,EAAgCA,IAAK,EAA5BA,GAgBT,OAAO,yBAAKU,MAAO1B,GAAnB,ICMa4B,EA7FH,WACV,OACE,yBAAKC,UAAU,QACb,qDACA,yBAAKA,UAAU,UACb,yBACEC,IAAI,GACJC,IAAI,2DAEN,yBACED,IAAI,sBACJC,IAAI,qEAEN,yBACED,IAAI,cACJC,IAAI,6DAEN,yBACED,IAAI,GACJC,IAAI,4DAEN,yBACED,IAAI,GACJC,IAAI,6DAGR,2BACE,uBAAGC,KAAK,mDAAR,iCAIF,uCACA,kBAAC,EAAD,MACA,uJAQA,6CACA,uFAEE,6BAFF,kFAMA,kBAAC,EAAD,CACElC,WAAY,EACZE,eAAgB,CACdiC,QAAS,QAEXN,WAAY,CACVO,MAAO,MACPD,QAAS,MACTE,aAAc,MACdC,SAAU,OACVC,UAAW,SACXC,YAAa,OACbC,OAAQ,kBACRC,cAAe,eAGnB,+e,OC/DNC,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.59472f2d.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ntype Props = {\n  characters?: number;\n  allowedCharacters?: RegExp;\n  onChange?: (res: string) => void;\n  password?: boolean;\n  inputStyle?: React.CSSProperties;\n  containerStyle?: React.CSSProperties;\n};\n\nconst AuthCode: React.FC<Props> = ({\n  characters = 6,\n  allowedCharacters = '^[A-Za-z0-9]*$',\n  onChange,\n  password,\n  inputStyle,\n  containerStyle\n}) => {\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  useEffect(() => {\n    inputsRef.current[0].focus();\n  }, []);\n\n  const sendResult = () => {\n    const res = inputsRef.current.map((input) => input.value).join('');\n    onChange && onChange(res);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.match(allowedCharacters)) {\n      if (e.target.nextElementSibling !== null) {\n        (e.target.nextElementSibling as HTMLInputElement).focus();\n      }\n    } else {\n      e.target.value = '';\n    }\n    sendResult();\n  };\n\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = e;\n    const target = e.target as HTMLInputElement;\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          (target.previousElementSibling as HTMLInputElement).focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n      sendResult();\n    }\n  };\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const value = e.clipboardData.getData('Text');\n    if (value.match(allowedCharacters)) {\n      for (let i = 0; i < characters && i < value.length; i++) {\n        inputsRef.current[i].value = value.charAt(i);\n        if (inputsRef.current[i].nextElementSibling !== null) {\n          (inputsRef.current[i].nextElementSibling as HTMLInputElement).focus();\n        }\n      }\n      sendResult();\n    }\n    e.preventDefault();\n  };\n\n  const inputs = [];\n  for (let i = 0; i < characters; i++) {\n    inputs.push(\n      <input\n        key={i}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleOnFocus}\n        onPaste={handleOnPaste}\n        type={password ? 'password' : 'text'}\n        ref={(el: HTMLInputElement) => (inputsRef.current[i] = el)}\n        maxLength={1}\n        style={inputStyle}\n      />\n    );\n  }\n\n  return <div style={containerStyle}>{inputs}</div>;\n};\n\nexport default AuthCode;\n","import React from 'react';\n\nimport AuthCode from 'react-auth-code-input';\nimport './index.css';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <h2>Default</h2>\n      <AuthCode />\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => <AuthCode />\n        `}\n      </code>\n      <h2>Custom Styles</h2>\n      <p>\n        Try writing and then deleting characters using backspace.\n        <br />\n        Pasting works too!, as long as the text copied matches the allowed\n        characters.\n      </p>\n      <AuthCode\n        characters={5}\n        containerStyle={{\n          padding: '16px'\n        }}\n        inputStyle={{\n          width: '2ch',\n          padding: '8px',\n          borderRadius: '8px',\n          fontSize: '40px',\n          textAlign: 'center',\n          marginRight: '12px',\n          border: '1px solid white',\n          textTransform: 'uppercase'\n        }}\n      />\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    characters={5}\n    containerStyle={{\n      padding: '16px'\n    }}\n    inputStyle={{\n      width: '2ch',\n      padding: '8px',\n      borderRadius: '8px',\n      fontSize: '40px',\n      textAlign: 'center',\n      marginRight: '12px',\n      border: '1px solid white',\n      textTransform: 'uppercase'\n    }}\n  />)\n}\n        `}\n      </code>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}