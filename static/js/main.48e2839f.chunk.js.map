{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["characters","allowedCharacters","onChange","password","inputStyle","containerStyle","inputClassName","containerClassName","inputsRef","useRef","useEffect","sendResult","res","input","handleOnChange","e","handleOnKeyDown","key","target","handleOnFocus","handleOnPaste","value","i","inputs","onKeyDown","onFocus","onPaste","type","ref","maxLength","className","style","App","alt","src","href","ReactDOM","render","document","getElementById"],"mappings":"mPAmBkC,SAAC,G,QACjCA,sBAAaA,EAAA,I,IACbC,6BAAoBA,EAAA,mBACpBC,aACAC,aACAC,eACAC,mBACAC,mBACAC,uBAEMC,EAAYC,iBAAlB,IAEAC,qBAAU,WACRF,uBADFE,IAuDA,IAnDA,IAAMC,EAAa,WACjB,IAAMC,EAAMJ,EAAA,aAAsB,mBAAWK,EAAX,SAAtB,KAAZ,IACAX,MAGIY,EAAiB,SAACC,GAClBA,qBAAJ,GACE,OAAIA,6BACDA,oCAGHA,kBAEFJ,KAGIK,EAAkB,SAACD,G,IACfE,EAAQF,EAARE,IACFC,EAASH,EAAf,OACA,cAAIE,IACEC,cAAJ,OAA2BA,yBACzB,OAAIA,2BACDA,iCACDH,oBAGFG,WAEFP,MAIEQ,EAAgB,SAACJ,GACrBA,mBAGIK,EAAgB,SAACL,GACrB,IAAMM,EAAQN,wBAAd,QACA,GAAIM,QAAJ,GAAoC,CAClC,IAAK,IAAIC,EAAT,EAAgBA,KAAkBA,EAAID,EAAtC,OAAoDC,IAClDd,mBAA6Ba,SAA7Bb,GACA,OAAIA,iCACDA,wCAGLG,IAEFI,oBAGIQ,EAAN,G,WACSD,GACPC,OACE,2BACEN,IAAKK,EACLpB,SAAUY,EACVU,UAAWR,EACXS,QAASN,EACTO,QAASN,EACTO,KAAMxB,EAAW,WAAa,OAC9ByB,IAAK,mBAA2BpB,aAA3B,GACLqB,UAAW,EACXC,UAAWxB,EACXyB,MAAO3B,MAZJkB,EAAT,EAAgBA,EAAhB,EAAgCA,IAAK,EAA5BA,GAiBT,OACE,yBAAKQ,UAAWvB,EAAoBwB,MAAO1B,GAD7C,ICNa2B,EA5FH,WACV,OACE,yBAAKF,UAAU,QACb,qDACA,yBAAKA,UAAU,UACb,yBACEG,IAAI,GACJC,IAAI,2DAEN,yBACED,IAAI,sBACJC,IAAI,qEAEN,yBACED,IAAI,cACJC,IAAI,6DAEN,yBACED,IAAI,GACJC,IAAI,4DAEN,yBACED,IAAI,GACJC,IAAI,6DAGR,2BACE,uBAAGC,KAAK,mDAAR,iCAIF,uCACA,kBAAC,EAAD,CAAUjC,SAAU,kBAAM,QAC1B,uJAQA,6CACA,uFAEE,6BAFF,8FAMA,kBAAC,EAAD,CACEA,SAAU,kBAAM,MAChBF,WAAY,EACZO,mBAAmB,YACnBD,eAAe,UAEjB,wCACA,+PAcA,yCACA,mR,OCrEN8B,EAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.48e2839f.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\ntype Props = {\n  characters?: number;\n  allowedCharacters?: RegExp;\n  onChange: (res: string) => void;\n  password?: boolean;\n  /**\n   * @deprecated Since version 1.2.0 Will be deleted in version 2.0. Use inputClassName instead.\n   */\n  inputStyle?: React.CSSProperties;\n  /**\n   * @deprecated Since version 1.2.0 Will be deleted in version 2.0. Use containerClassName instead.\n   */\n  containerStyle?: React.CSSProperties;\n  inputClassName?: string;\n  containerClassName?: string;\n};\n\nconst AuthCode: React.FC<Props> = ({\n  characters = 6,\n  allowedCharacters = '^[A-Za-z0-9]*$',\n  onChange,\n  password,\n  inputStyle,\n  containerStyle,\n  inputClassName,\n  containerClassName\n}) => {\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  useEffect(() => {\n    inputsRef.current[0].focus();\n  }, []);\n\n  const sendResult = () => {\n    const res = inputsRef.current.map((input) => input.value).join('');\n    onChange(res);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.match(allowedCharacters)) {\n      if (e.target.nextElementSibling !== null) {\n        (e.target.nextElementSibling as HTMLInputElement).focus();\n      }\n    } else {\n      e.target.value = '';\n    }\n    sendResult();\n  };\n\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { key } = e;\n    const target = e.target as HTMLInputElement;\n    if (key === 'Backspace') {\n      if (target.value === '' && target.previousElementSibling !== null) {\n        if (target.previousElementSibling !== null) {\n          (target.previousElementSibling as HTMLInputElement).focus();\n          e.preventDefault();\n        }\n      } else {\n        target.value = '';\n      }\n      sendResult();\n    }\n  };\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select();\n  };\n\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n    const value = e.clipboardData.getData('Text');\n    if (value.match(allowedCharacters)) {\n      for (let i = 0; i < characters && i < value.length; i++) {\n        inputsRef.current[i].value = value.charAt(i);\n        if (inputsRef.current[i].nextElementSibling !== null) {\n          (inputsRef.current[i].nextElementSibling as HTMLInputElement).focus();\n        }\n      }\n      sendResult();\n    }\n    e.preventDefault();\n  };\n\n  const inputs = [];\n  for (let i = 0; i < characters; i++) {\n    inputs.push(\n      <input\n        key={i}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onFocus={handleOnFocus}\n        onPaste={handleOnPaste}\n        type={password ? 'password' : 'text'}\n        ref={(el: HTMLInputElement) => (inputsRef.current[i] = el)}\n        maxLength={1}\n        className={inputClassName}\n        style={inputStyle}\n      />\n    );\n  }\n\n  return (\n    <div className={containerClassName} style={containerStyle}>\n      {inputs}\n    </div>\n  );\n};\n\nexport default AuthCode;\n","import React from 'react';\n\nimport AuthCode from 'react-auth-code-input';\nimport './index.css';\n\nconst App = () => {\n  return (\n    <div className='main'>\n      <h1>React Auth Code Input</h1>\n      <div className='badges'>\n        <img\n          alt=''\n          src='https://img.shields.io/npm/v/react-auth-code-input.svg'\n        />\n        <img\n          alt='code style standard'\n          src='https://img.shields.io/badge/code_style-standard-brightgreen.svg'\n        />\n        <img\n          alt='license MIT'\n          src='https://img.shields.io/badge/license-MIT-brightgreen.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dt/react-auth-code-input.svg'\n        />\n        <img\n          alt=''\n          src='https://img.shields.io/npm/dw/react-auth-code-input.svg'\n        />\n      </div>\n      <p>\n        <a href='https://github.com/drac94/react-auth-code-input'>\n          View documentation on GitHub\n        </a>\n      </p>\n      <h2>Default</h2>\n      <AuthCode onChange={() => null} />\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => <AuthCode />\n        `}\n      </code>\n      <h2>Custom Styles</h2>\n      <p>\n        Try writing and then deleting characters using backspace.\n        <br />\n        Copying and pasting also works, as long as the text copied matches the\n        allowed characters.\n      </p>\n      <AuthCode\n        onChange={() => null}\n        characters={5}\n        containerClassName='container'\n        inputClassName='input'\n      />\n      <p>index.tsx</p>\n      <code>\n        {`\nimport React from 'react'\nimport AuthCode from 'react-auth-code-input'\n\nconst App = () => {\n  return (<AuthCode\n    characters={5}\n    containerClassName='container'\n    inputClassName='input'\n  />)\n}\n        `}\n      </code>\n      <p>styles.css</p>\n      <code>\n        {`\n.container {\n  padding: 16px;\n}\n\n.input {\n  width: 2ch;\n  padding: 8px;\n  border-radius: 8px;\n  font-size: 40px;\n  text-align: center;\n  margin-right: 12px;\n  border: 1px solid white;\n  text-transform: uppercase;\n}\n        `}\n      </code>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}